// TinyGps++ helps decode the NMEA values from the gps
#include "TinyGPS++.h"
// Software Serial allows some ports to be RX and TX
#include <SoftwareSerial.h>

//the right motor will be controlled by the motor A pins on the motor driver
const int AIN1 = 13;           //control pin 1 on the motor driver for the right motor
const int AIN2 = 12;            //control pin 2 on the motor driver for the right motor
const int PWMA = 11;            //speed control pin on the motor driver for the right motor

//the left motor will be controlled by the motor B pins on the motor driver
const int PWMB = 10;           //speed control pin on the motor driver for the left motor
const int BIN2 = 9;           //control pin 2 on the motor driver for the left motor
const int BIN1 = 8;           //control pin 1 on the motor driver for the left motor

char incomingVal = 0;
// holds values that will be either 'C' for celsius or 'F' for Fahrenheit
String information = "";
// holds string that will contain the rest of the information

// Temperature Variables, are used to hold temperature readings in Celsius and Fahrenheit
float voltage = 0;
float degreeC = 0;
float degreeF = 0;

SoftwareSerial serial_connection(10, 11); 
//Sets pin 10 as RX and 11 as TX for the NEO 6M GPS module

TinyGPSPlus gps;
//initializes an object of TinyGPS


// Photoresistor values
int tempSens = A0;
int photoresistor = 0;
int threshold = 400;
int redpin = 2;
int greenpin = 3;
int bluepin = 4;


//distance variables
const int trigPin = 6;
const int echoPin = 5;

int switchPin = 7;             //switch to turn the robot on and off

float distance = 0;            //variable to store the distance measured by the distance sensor

//robot behaviour variables
int backupTime = 300;           //amount of time that the robot will back up when it senses an object
int turnTime = 200;             //amount that the robot will turn once it has backed up

/********************************************************************************/
void setup()
{
  pinMode(trigPin, OUTPUT);       //this pin will send ultrasonic pulses out from the distance sensor
  pinMode(echoPin, INPUT);        //this pin will sense when the pulses reflect back to the distance sensor

  pinMode(switchPin, INPUT_PULLUP);   //set this as a pullup to sense whether the switch is flipped

  //sets LED pins to Output
  pinMode(redpin, OUTPUT);
  pinMode(greenpin, OUTPUT);
  pinMode(bluepin, OUTPUT);
  
  //set the motor control pins as outputs
  pinMode(AIN1, OUTPUT);
  pinMode(AIN2, OUTPUT);
  pinMode(PWMA, OUTPUT);

  pinMode(BIN1, OUTPUT);
  pinMode(BIN2, OUTPUT);
  pinMode(PWMB, OUTPUT);

  Serial.begin(9600);                       //begin serial communication with the computer
  Serial.print("To infinity and beyond!");  //test the serial connection
}

/********************************************************************************/
void loop()
{
  //DETECT THE DISTANCE READ BY THE DISTANCE SENSOR
  distance = getDistance();
  
  if (digitalRead(switchPin) == LOW) 
  { 
  //if the on switch is flipped
    photoresistor = analogRead(A1);
    if(photoresistor < threshold)
    {
        lightOn();
    }
    else
    {
      turnOff();
    }
    while(serial_connection.available()) // while the gps connection is available, encode all the information into the TinyGPS object
    {
      gps.encode(serial_connection.read());
    }
    voltage = analogRead(A0) * 0.004882813; 
    degreeC = (voltage - .5) *  (100.0); 
    degreeF = (degreeC) * (9.0/ 5.0) + 32.0;
    if(Serial.available() > 0)
    {
      incomingVal = Serial.read();
      if (incomingVal == 'C')
      {
        Serial.println(degreeC);
        information = "Latitude: " + (String)gps.location.lat() + " Longitude: " + (String)gps.location.lng() + " Speed" + (String)gps.speed.mph() + " Altitude" + gps.altitude.feet();
        Serial.println(information);
      }
      else if (incomingVal == 'F')
      {
        Serial.println(degreeF);
        information = "Latitude: " + (String)gps.location.lat() + " Longitude: " + (String)gps.location.lng() + " Speed" + (String)gps.speed.mph() + " Altitude" + gps.altitude.feet();
        Serial.println(information);
      }
    }
    if (distance < 10) //if an object is detected
    {              
      //stop for a moment
      rightMotor(0);
      leftMotor(0);
      delay(200);

      //back up
      rightMotor(-255);
      leftMotor(-255);
      delay(backupTime);

      //turn away from obstacle
      rightMotor(255);
      leftMotor(-255);
      delay(turnTime);

    } 
    else //if no obstacle is detected drive forward
    {                        
      rightMotor(255);
      leftMotor(255);
    }
  } 
  //if the switch is off then stop
  else 
  {                        
    //stop the motors
    turnOff();
    rightMotor(0);
    leftMotor(0);
  }
  delay(50);                      //wait 50 milliseconds between readings
}

/********************************************************************************/
void rightMotor(int motorSpeed)                       //function for driving the right motor
{
  if (motorSpeed > 0)                                 //if the motor should drive forward (positive speed)
  {
    digitalWrite(AIN1, HIGH);                         //set pin 1 to high
    digitalWrite(AIN2, LOW);                          //set pin 2 to low
  }
  else if (motorSpeed < 0)                            //if the motor should drive backward (negative speed)
  {
    digitalWrite(AIN1, LOW);                          //set pin 1 to low
    digitalWrite(AIN2, HIGH);                         //set pin 2 to high
  }
  else                                                //if the motor should stop
  {
    digitalWrite(AIN1, LOW);                          //set pin 1 to low
    digitalWrite(AIN2, LOW);                          //set pin 2 to low
  }
  analogWrite(PWMA, abs(motorSpeed));                 //now that the motor direction is set, drive it at the entered speed
}

/********************************************************************************/
void leftMotor(int motorSpeed)                        //function for driving the left motor
{
  if (motorSpeed > 0)                                 //if the motor should drive forward (positive speed)
  {
    digitalWrite(BIN1, HIGH);                         //set pin 1 to high
    digitalWrite(BIN2, LOW);                          //set pin 2 to low
  }
  else if (motorSpeed < 0)                            //if the motor should drive backward (negative speed)
  {
    digitalWrite(BIN1, LOW);                          //set pin 1 to low
    digitalWrite(BIN2, HIGH);                         //set pin 2 to high
  }
  else                                                //if the motor should stop
  {
    digitalWrite(BIN1, LOW);                          //set pin 1 to low
    digitalWrite(BIN2, LOW);                          //set pin 2 to low
  }
  analogWrite(PWMB, abs(motorSpeed));                 //now that the motor direction is set, drive it at the entered speed
}

/********************************************************************************/
//RETURNS THE DISTANCE MEASURED BY THE HC-SR04 DISTANCE SENSOR
float getDistance()
{
  float echoTime;                   //variable to store the time it takes for a ping to bounce off an object
  float calculatedDistance;         //variable to store the distance calculated from the echo time

  //send out an ultrasonic pulse that's 10ms long
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  echoTime = pulseIn(echoPin, HIGH);      //use the pulsein command to see how long it takes for the
                                          //pulse to bounce back to the sensor

  calculatedDistance = echoTime / 148.0;  //calculate the distance of the object that reflected the pulse (half the bounce time multiplied by the speed of sound)

  return calculatedDistance;              //send back the distance that was calculated
}
void lightOn ()
{
  analogWrite(redpin, 100);
  analogWrite(bluepin, 100);
  analogWrite(greenpin, 100);
}
void turnOff ()
{
  analogWrite(redpin, 0);
  analogWrite(greenpin, 0);
  analogWrite(bluepin, 0);
}



//gps.location.lat()    gives the latitude
//gps.location.lng()    gives the longitude
//gps.speed.mph()       gives the speed in miles per hour
//gps.altitude.feet()   gives the altitude in feet
